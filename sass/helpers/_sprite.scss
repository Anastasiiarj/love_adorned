// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$payment-1-name: 'payment-1';
$payment-1-x: 0px;
$payment-1-y: 0px;
$payment-1-offset-x: 0px;
$payment-1-offset-y: 0px;
$payment-1-width: 34px;
$payment-1-height: 22px;
$payment-1-total-width: 70px;
$payment-1-total-height: 70px;
$payment-1-image: '../images/sprite.png';
$payment-1: (0px, 0px, 0px, 0px, 34px, 22px, 70px, 70px, '../images/sprite.png', 'payment-1', );
$payment-2-name: 'payment-2';
$payment-2-x: 36px;
$payment-2-y: 0px;
$payment-2-offset-x: -36px;
$payment-2-offset-y: 0px;
$payment-2-width: 34px;
$payment-2-height: 22px;
$payment-2-total-width: 70px;
$payment-2-total-height: 70px;
$payment-2-image: '../images/sprite.png';
$payment-2: (36px, 0px, -36px, 0px, 34px, 22px, 70px, 70px, '../images/sprite.png', 'payment-2', );
$payment-3-name: 'payment-3';
$payment-3-x: 0px;
$payment-3-y: 24px;
$payment-3-offset-x: 0px;
$payment-3-offset-y: -24px;
$payment-3-width: 34px;
$payment-3-height: 22px;
$payment-3-total-width: 70px;
$payment-3-total-height: 70px;
$payment-3-image: '../images/sprite.png';
$payment-3: (0px, 24px, 0px, -24px, 34px, 22px, 70px, 70px, '../images/sprite.png', 'payment-3', );
$payment-4-name: 'payment-4';
$payment-4-x: 36px;
$payment-4-y: 24px;
$payment-4-offset-x: -36px;
$payment-4-offset-y: -24px;
$payment-4-width: 34px;
$payment-4-height: 22px;
$payment-4-total-width: 70px;
$payment-4-total-height: 70px;
$payment-4-image: '../images/sprite.png';
$payment-4: (36px, 24px, -36px, -24px, 34px, 22px, 70px, 70px, '../images/sprite.png', 'payment-4', );
$payment-5-name: 'payment-5';
$payment-5-x: 0px;
$payment-5-y: 48px;
$payment-5-offset-x: 0px;
$payment-5-offset-y: -48px;
$payment-5-width: 34px;
$payment-5-height: 22px;
$payment-5-total-width: 70px;
$payment-5-total-height: 70px;
$payment-5-image: '../images/sprite.png';
$payment-5: (0px, 48px, 0px, -48px, 34px, 22px, 70px, 70px, '../images/sprite.png', 'payment-5', );
$payment-6-name: 'payment-6';
$payment-6-x: 36px;
$payment-6-y: 48px;
$payment-6-offset-x: -36px;
$payment-6-offset-y: -48px;
$payment-6-width: 34px;
$payment-6-height: 22px;
$payment-6-total-width: 70px;
$payment-6-total-height: 70px;
$payment-6-image: '../images/sprite.png';
$payment-6: (36px, 48px, -36px, -48px, 34px, 22px, 70px, 70px, '../images/sprite.png', 'payment-6', );
$spritesheet-width: 70px;
$spritesheet-height: 70px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($payment-1, $payment-2, $payment-3, $payment-4, $payment-5, $payment-6, );
$spritesheet: (70px, 70px, '../images/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
